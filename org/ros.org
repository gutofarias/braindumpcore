:PROPERTIES:
:ID:       d711763d-b529-4f2b-98d2-c34b2bf8657c
:END:
#+title: Robot Operating System (ROS)

* Introduction to ROS

** What is ROS?

*** Left                                                         :B_column:
:PROPERTIES:
:BEAMER_col: 0.63
:BEAMER_env: column
:END:

- Meta-operating system, providing low level services:
  - process communication over a network
  - device control
  - hardware abstraction
- Distributed framework of processes

*** Right                                                        :B_column:
:PROPERTIES:
:BEAMER_col: 0.43
:BEAMER_env: column
:END:

#+attr_latex: :width 0.4\textwidth
[[file:images/ros/ros-logo_2019-10-15_16-56-35.jpg]]

** Why use ROS?

- "Lightweight" framework that speeds up large-scale robotic
  development
- Many libraries developed on top of this framework that can be
  reused:
  - Physics simulation ([[http://gazebosim.org/][Gazebo]])
  - Movement + Navigation ([[http://wiki.ros.org/navigation][ROS navigation]])

** ROS Concepts
:PROPERTIES:
:BEAMER_opt: allowframebreaks
:END:
*** Computational Graph

- All computation is organized as a peer-to-peer network of communicating
  processes.

*** Nodes

- Processes that perform any form of computation.
- Nodes can communicate with one another.
- Example of nodes:
  - Publish sensor readings
  - Receiving teleop commands and running them
- Written with ROS client libraries ([[http://wiki.ros.org/rospy][rospy]], [[http://wiki.ros.org/roscpp][roscpp]])

*** Master (Primary) Node

- Provides name registration, node lookup to all nodes in the
  computational graph.
- Enables communication between nodes.

*** Parameter Server

- "Distributed" key-value store: all nodes can access data stored in
  these keys.

*** Topics

- Nodes communicating via the publish-subscribe semantics do so by
  publishing and subscribing to topics.
- Every topic has a name, e.g. ~/sensors/temp1~
- No access permissions

*** Services

- Request-response semantics (think Web servers)
- Requests are blocking

** Example Computational Graph

#+begin_src dot :file images/ros/newspirit.png :cmdline -Kdot -Tpng
  graph G {
        master[label="Master Node (RPI)", style=filled, fillcolor=yellow]
        mega[label="Servo Microcontroller (Arduino Mega)", style=filled, fillcolor=yellow]
        lws[label="Lewansoul MC"]
        ws[label="ROS Websocket Server (RPI)", style=filled, fillcolor=yellow]
        phone[label="Phone Joystick"]
        master -- mega
        master -- ws
        ws -- mega
        mega -- lws
        phone -- ws[style=dotted];
  }
#+end_src

* Getting Started With ROS
** ROS Environment Setup

Here I assume you have the ROS environment set up. If not, see [[*ROS Installation][the
appendix]].

** Creating a ROS Workspace

Catkin is ROS' package manager, built on top of CMake. 

#+begin_src bash
  mkdir -p ~/catkin_ws/src        # Create the directories
  cd ~/catkin_ws/                 # Change to the directory
  catkin_make                     # Initial setup
#+end_src

** Exploring ROS shell commands [fn::Almost all these commands have tab completion!]
*** rospack
~rospack find~ locates ROS packages.

#+begin_src bash
  rospack find roscpp # /opt/ros/melodic/share/roscpp
#+end_src
*** roscd
roscd changes you to the directory of the ros package.

#+begin_src bash
  roscd roscpp
  pwd # /opt/ros/melodic/share/roscpp
#+end_src
** Creating a ROS package

We use the convenience script ~catkin_create_pkg~ to instantiate our package.

#+begin_src bash
  cd ~/catkin_ws/src
  catkin_create_pkg workshop std_msgs rospy roscpp
  # Created file workshop/CMakeLists.txt
  # Created file workshop/package.xml
  # Created folder workshop/include/workshop
  # Created folder workshop/src
  # Successfully created files in /home/jethro/catkin_ws/src/workshop. Please adjust the values in package.xml.
#+end_src

** What's in a ROS package?

#+begin_src text
  workshop
      CMakeLists.txt          # Build instructions
      include                 # For cpp deps, if any
         workshop
      package.xml             # Details about the package
      src                     # Contains source code
#+end_src

** Starting ROS

We initialize the ROS master node with ~roscore~.

#+begin_src bash
  roscore
  
  # ...
  # process[master]: started with pid [16206]
  # ROS_MASTER_URI=http://jethro:11311/

  # setting /run_id to 05bf8c5e-efed-11e9-957b-382c4a4f3d31
  # process[rosout-1]: started with pid [16217]

#+end_src

To kill it, press ~Ctrl-C~ in the same terminal.

** ROS Nodes
:PROPERTIES:
:BEAMER_opt: allowframebreaks
:END:
*** rosnode

rosnode let's us inspect available nodes:

#+begin_src bash
  rosnode list                    # /rosout
  rosnode info /rosout
#+end_src

What happens if master is not running?

#+begin_src bash
  rosnode list               # ERROR: Unable to communicate with master!
#+end_src

*** Running a ROS node

A ROS package may contain many ROS nodes.

#+begin_src bash
  rosrun turtlesim <TAB>
  # draw_square        mimic              turtlesim_node     turtle_teleop_key  
#+end_src

#+begin_src bash
  rosrun turtlesim turtlesim_node 
  # [ INFO] [1571214245.786246078]: Starting turtlesim with node name /turtlesim
  # [ INFO] [1571214245.790986159]: Spawning turtle [turtle1] at x=[5.544445], y=[5.544445], theta=[0.000000]
#+end_src

Exercise: reinspect the node list.


** ROS Topics
:PROPERTIES:
:BEAMER_opt: allowframebreaks
:END:

Now we have a visual simulation of a turtle. How do we make it move?

#+begin_src bash
rosrun turtesim turtle_teleop_key
#+end_src

*** What's going on?

- ~turtle_teleop_key~ advertises on a ROS topic, and publishes each keystroke:

#+begin_src bash
  rostopic list
  rostopic echo /turtle1/cmd_vel
#+end_src

*** ROS Messages

- ROS messages are pre-defined formats. They are binarized and
  compressed before they are sent over the wire.

#+begin_src bash
  rostopic type /turtle1/cmd_vel   # geometry_msgs/Twist
#+end_src

*** Monitoring the Topic

- The rate at which messages is published is good to monitor (in Hz).
- A topic that has too many messages can get congested, and buffer/drop
  many messages, or congest the ROS network.

#+begin_src bash
  rostopic hz /turtle1/cmd_vel 
  # subscribed to [/turtle1/cmd_vel]
  # average rate: 13.933
  # min: 0.072s max: 0.072s std dev: 0.00000s window: 2
#+end_src



*** Rosbag
- A bag is subscribes to one or more topics, and stores serialized
  data that is received (for logging/replay)

#+begin_src bash
  rosbag record /turtle1/cmd_vel
  # [ INFO] [1571294982.145679913]: Subscribing to /turtle1/cmd_vel
  # [ INFO] [1571294982.168808833]: Recording to 2019-10-17-14-49-42.bag
#+end_src

** ROS Services

- Services allow request-response interactions between nodes.

#+begin_src bash
rosservice list
rosservice call /clear
rosservice type /spawn | rossrv show
#+end_src

** ROS Params

the ~rosparams~ commandline interface allows us to store and manipulate
data on the ROS Parameter server. [fn::can also be done
programatically]

#+begin_src bash
  rosparam set            # set parameter
  rosparam get            # get parameter
  rosparam load           # load parameters from file
  rosparam dump           # dump parameters to file
  rosparam delete         # delete parameter
  rosparam list           # list parameter names
#+end_src

* Pubsub
:PROPERTIES:
:BEAMER_opt: allowframebreaks
:END:

** When do we use topics?
Previously we looked at ready-made ROS packages and how they used
topics and services. Now, we'll write our own publisher and
subscriber.

The pubsub interface is useful in situations where a response for each
request is not required:

- Sensor readings
- Log info

** A Simple Publisher

We use ~rospy~, but ~roscpp~ is fine as well. We create a new file in our
workshop package ~workshop/src/talker.py~:

#+begin_src python
  #!/usr/bin/env python
  import rospy
  from std_msgs.msg import String

  pub = rospy.Publisher('my_topic', String, queue_size=10) # initializes topic
  rospy.init_node('talker', anonymous=True) # required to talk to Master

  while not rospy.is_shutdown():
      pub.publish("Hello")
#+end_src


** Executing the Publisher Node

We need to make our Python file executable:

#+begin_src bash
  chmod +x talker.py
#+end_src

#+begin_src bash
  rosrun workshop talker.py
#+end_src

Exercise: monitor the output. What's wrong? (hint: Hz)

** Setting the rate of publishing

We use the ~Rate~ object, and the ~rate.sleep()~ to set the rate of
publishing:

#+begin_src python
  rate = rospy.Rate(10)           # 10 hz
  # ...
  rate.sleep()
  # ...
#+end_src

** Good Practice

We often wrap all our logic in a function, and catch the
~ROSInterruptException~ exception:

#+begin_src python
  #!/usr/bin/env python
  import rospy
  from std_msgs.msg import String

  def talker():
      pub = rospy.Publisher('my_topic', String, queue_size=10) # initializes topic
      # ...

  try:
      talker()
  except rospy.ROSInterruptException:
      pass
#+end_src

** Exercise: Write a time publisher (5 minutes)

Goal: publish the current date-time onto a topic ~/datetime.~ 

Hint: Python has a ~datetime~ library.

** Subscriber

We create a listener in ~workshop/src/listener.py~

#+begin_src python
  #!/usr/bin/env python
  import rospy
  from std_msg.msg import String

  def echo(data):
      print(data.data)

  def listener():
      rospy.init_node("listener", anonymous=True)
      rospy.Subscriber("my_topic", String, echo)
      rospy.spin() # prevents python from exiting

  listener()
#+end_src

** Summary

#+begin_src python
  rospy.init_node(name)           # create node
  rospy.Publisher(topic_name, msg_type) # create publisher
  rospy.Subscriber(topic_name, msg_type, callback) # create subscriber
  rospy.Rate(10)                  # rate object
  rospy.spin()                    # spin
#+end_src

* Services

** Msg and Srv

- msg :: message files that define the format of a ROS message. These
  generate source code for different languages (think Apache Thrift,
  Protobuf).
- srv :: describes a service (request/response)

** Creating a msg

#+begin_src bash
mkdir -p workshop/msg
#+end_src

Create a file ~workshop/msg/Num.msg:~

#+begin_src text
  int64 num
#+end_src

** Compiling the msg
:PROPERTIES:
:BEAMER_opt: allowframebreaks
:END:

In ~package.xml~:
#+begin_src xml
  <build_depend>message_generation</build_depend>
  <exec_depend>message_runtime</exec_depend>
#+end_src

In CMakeLists.txt:

#+begin_src text
  find_package(catkin REQUIRED COMPONENTS
     roscpp
     rospy
     std_msgs
     message_generation
  )

  catkin_package(
    ...
    CATKIN_DEPENDS message_runtime ...
    ...)

  add_message_files(
    FILES
    Num.msg
  )

  generate_messages()
#+end_src

Compile the message:

#+begin_src bash
  cd ~/catkin_ws
  catkin_make
  catkin_make install
  # ...
  # [100%] Built target workshop_generate_messages_cpp
  # [100%] Built target workshop_generate_messages_py
  # [100%] Built target workshop_generate_messages_eus
  # Scanning dependencies of target workshop_generate_messages
  # [100%] Built target workshop_generate_messages
#+end_src

** Using the ROS msg

#+begin_src bash
  rosmsg list                     # ... workshop/Num
  rosmsg show workshop/Num        # int64 num
#+end_src

** Creating a ROS srv

#+begin_src bash
mkdir -p workshop/srv
#+end_src

In ~workshop/srv/SumInts.srv~:

#+begin_src text
  int64 a
  int64 b
  ---
  int64 sum
#+end_src

** Compiling the ROS srv

Since srv files are also compiled, the setup is [[*Compiling the msg][similar to compiling msgs]].

** Writing a Service Node

We can create a server that uses the service file we defined earlier:

#+begin_src python
  #!/usr/bin/env python
  from workshop.srv import SumInts, SumIntsResponse
  import rospy

  def handler(req):
      return SumIntsResponse(req.a + req.b)

  def sumints_server():
      rospy.init_node("sumints_server")
      s = rospy.Service("sumints", SumInts, handler)
      rospy.spin()

  sumints_server()
#+end_src

** Writing a Client
:PROPERTIES:
:BEAMER_opt: allowframebreaks
:END:

#+begin_src python
  #!/usr/bin/env python
  import sys
  import rospy
  from workshop.srv import SumInts

  def sumints_client(x, y):
      rospy.wait_for_service('sumints')
      try:
          sumints = rospy.ServiceProxy('sumints', SumInts)
          resp1 = sumints(x, y)
          return resp1.sum
      except rospy.ServiceException, e:
          print "Service call failed: %s"%e

  x = int(sys.argv[1])
  y = int(sys.argv[2])
  print "%s + %s = %s"%(x, y, sumints_client(x, y))
#+end_src

#+begin_src bash
  rosrun workshop sumint_client.py 1 2
  # 1 + 2 = 3

#+end_src

** Exercise: Time Service (15 minutes)

Write a service that:

- requests nothing
- responds with the current time

Write a client that sends the request and prints this response.

* What's Next?

** What's Next?
- Run a simulator, model the robot using URDF
- Look at community ROS packages
  - tf2 :: maintain robotic coordinate frames (pose estimation)
  - gmapping/slam etc. :: navigation
- Look at ROS 2

* Appendix
** Common Pitfalls

1. Not sourcing your ~devel/setup.bash~:

#+begin_src bash
  source devel/setup.bash
#+end_src

   1. This is necessary to make available all the C++ and python ROS
      packages that you have built
   2. I recommend using [[https://direnv.net/][direnv]], and sourcing it every time you enter
      the Catkin workspace.

** ROS Installation
*** Ubuntu
Follow the instructions on ROS Wiki.

*** VM

[[https://drive.google.com/file/d/1SFU4rhWyAd2mlmDAIh0pvXkOvpxO5QuT/view][Download the VM image]] and load it.
