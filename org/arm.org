:PROPERTIES:
:ID:       c3ed1a48-1e89-4cd5-bd84-7a29664e6574
:END:
#+title: ARM Assembly Programming

- tags :: [[id:e5f08144-5c0d-4a74-a10a-34a37b89b49c][Operating Systems]], [[id:02f0d648-baae-478f-b738-448cf53e2a63][Programming Languages]]

* Background

In a /machine language/, instructions are encoded as 0's and 1's. This
is unwieldy for programmers  to write. Hence, to tell processors what
to execute, programmers use an /assembly language/, writing these
instructions in textual form, for example:

#+begin_src text
  MOV R9, R3
#+end_src


An /assembler/ translates the assembly language into machine language.

There are many machine languages, each designed with a processor in
mind, enabling fast and simple circuits to be built to execute the
instructions. Each machine language requires a corresponding assembly
language, since the assembly language must support a different set of
machine instructions. The design of the machine language encoding is
called the /instruction set architecture (ISA)/.

* Memory Organization

- Byte-addressable, 32-bit address space
- little- or big-endian addressable
- 32-bit word length
- word, half-word and byte data transfers to and from processor registers
- word and half-world transfers must be aligned

* Arm 


